{"version":3,"sources":["Components/TitleBar.jsx","Components/NavBar.jsx","Components/MainContent.jsx","redux/ducks/mode.js","redux/configureStore.js","js/utils.js","App.js","reportWebVitals.js","index.js"],"names":["TitleBar","titleBarCSS","height","backgroundColor","id","style","NavBar","navbarCSS","className","MainContent","mainContentCSS","SET_MOBILE","SET_DESKTOP","initialState","modeIsMobile","reducer","state","action","type","combineReducers","mode","modeReducer","store","createStore","initializeEventListeners","window","addEventListener","windowWidth","innerWidth","dispatch","payload","console","log","getState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAiBeA,MAbf,WACE,IAAIC,EAAc,CAChBC,OAAO,GAAD,OAJoB,GAIpB,MACNC,gBAAiB,QAGnB,OACE,qBAAKC,GAAG,YAAYC,MAAOJ,EAA3B,8BCOWK,MAdf,WAEI,IAAIC,EAAY,CACZL,OAAO,GAAD,OALc,GAKd,MACNC,gBAAiB,OAGrB,OACI,qBAAKC,GAAG,UAAUI,UAAU,oCAAoCH,MAAOE,EAAvE,qBCKOE,MAbf,WACE,IAAIC,EAAiB,CACnBR,OAAO,gBAAD,OFJoB,GEIpB,gBDJkB,GCIlB,OACNC,gBAAiB,SAGnB,OACE,qBAAKC,GAAG,eAAeC,MAAOK,EAA9B,0B,cCXEC,EAAa,aACbC,EAAc,cAgBdC,EAAe,CACjBC,cAAc,GAcHC,EAXC,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC9C,OAAQA,EAAOC,MACX,KAAKP,EACD,OAAO,2BAAKK,GAAZ,IAAmBF,cAAc,IACrC,KAAKF,EACD,OAAO,2BAAKI,GAAZ,IAAmBF,cAAc,IACrC,QACI,OAAOE,ICzBbD,EAAUI,YAAgB,CAC5BC,KAAMC,IAKKC,EAFDC,YAAYR,GCJfS,EAA2B,WAClCC,OAAOC,iBAAiB,UAAU,WAC9B,IAAIC,EAAcF,OAAOG,WAErBD,EAAc,IACdL,EAAMO,SFLa,CAC3BX,KAAMP,EACNmB,QAAS,KEKDR,EAAMO,SFAe,CAC7BX,KAAMN,EACNkB,QAAS,KECLC,QAAQC,IAAIL,GACZI,QAAQC,IAAIV,EAAMW,WAAWb,KAAKN,kBCQ3BoB,MAdf,WAGE,OAFAV,IAGE,qBAAKhB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCJO2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d406a859.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport let TITLE_BAR_HEIGHT = 80;\r\n\r\nfunction TitleBar() {\r\n  let titleBarCSS = {\r\n    height: `${TITLE_BAR_HEIGHT}px`, \r\n    backgroundColor: \"blue\"\r\n  }\r\n\r\n  return (\r\n    <div id=\"title-bar\" style={titleBarCSS}>\r\n        Penn Spark Gray\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TitleBar;\r\n","import React from \"react\";\r\n\r\nexport let NAV_BAR_HEIGHT = 80;\r\n\r\nfunction NavBar() {\r\n\r\n    let navbarCSS = {\r\n        height: `${NAV_BAR_HEIGHT}px`, \r\n        backgroundColor: \"red\"\r\n    }\r\n\r\n    return (\r\n        <div id=\"nav-bar\" className=\"container-fluid d-block d-lg-none\" style={navbarCSS}>\r\n            NavBar\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { NAV_BAR_HEIGHT } from \"./NavBar\";\r\nimport { TITLE_BAR_HEIGHT } from \"./TitleBar\";\r\n\r\nfunction MainContent() {\r\n  let mainContentCSS = {\r\n    height: `calc(100vh - ${TITLE_BAR_HEIGHT}px - ${NAV_BAR_HEIGHT}px)`, \r\n    backgroundColor: \"green\"\r\n  }\r\n\r\n  return (\r\n    <div id=\"main-content\" style={mainContentCSS}> \r\n        MainContent\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","const SET_MOBILE = \"SET_MOBILE\";\r\nconst SET_DESKTOP = \"SET_DESKTOP\";\r\n\r\nexport const setMobile= () => ({\r\n    type: SET_MOBILE,\r\n    payload: {\r\n\r\n    }\r\n});\r\n\r\nexport const setDesktop = () => ({\r\n    type: SET_DESKTOP,\r\n    payload: {\r\n\r\n    }\r\n});\r\n\r\nconst initialState = {\r\n    modeIsMobile: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_MOBILE:\r\n            return { ...state, modeIsMobile: true };\r\n        case SET_DESKTOP:\r\n            return { ...state, modeIsMobile: false };\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import { combineReducers, createStore } from \"redux\";\r\nimport modeReducer from \"./ducks/mode\";\r\n\r\nconst reducer = combineReducers({\r\n    mode: modeReducer\r\n});\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import store from \"../redux/configureStore\"\r\nimport { setMobile, setDesktop } from \"../redux/ducks/mode\";\r\n\r\nexport let initializeEventListeners = () => {\r\n    window.addEventListener(\"resize\", ()=>{\r\n        let windowWidth = window.innerWidth;\r\n\r\n        if (windowWidth < 992) {\r\n            store.dispatch(setMobile());\r\n        } else {\r\n            store.dispatch(setDesktop());\r\n        }\r\n\r\n        console.log(windowWidth)\r\n        console.log(store.getState().mode.modeIsMobile);\r\n    });\r\n}","import \"./css/base-styles.css\";\nimport \"./css/bootstrap-grid.min.css\";\n\nimport TitleBar from \"./Components/TitleBar\";\nimport MainContent from \"./Components/MainContent\";\nimport NavBar from \"./Components/NavBar\";\nimport { initializeEventListeners } from \"./js/utils\";\n\nfunction App() {\n  initializeEventListeners();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TitleBar />\n        <MainContent />\n        <NavBar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}